{% extends "layout/base.html.twig" %}

{% block title %}GIS Data Viewer{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ol@v7.4.0/ol.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .viewer-container {
            display: flex;
            height: calc(100vh - 60px);
        }
        
        .datasets-sidebar {
            width: 300px;
            background: #f5f5f5;
            padding: 15px;
            border-right: 1px solid #ddd;
            overflow-y: auto;
        }
        
        .dataset-item {
            padding: 10px;
            margin-bottom: 8px;
            background: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            cursor: move;
        }
        
        .dataset-item:hover {
            background: #f0f0f0;
        }
        
        .map-container {
            flex-grow: 1;
            position: relative;
        }
        
        #map {
            width: 100%;
            height: 100%;
        }
        
        .export-button {
            position: absolute;
            top: 10px;
            right: 10px;
            z-index: 1000;
            background: white;
            padding: 8px 12px;
            border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 14px;
            color: #333;
            border: 1px solid #ddd;
        }
        
        .export-button:hover {
            background: #f5f5f5;
        }
        
        .export-button i {
            font-size: 16px;
        }
    </style>
{% endblock %}

{% block content %}
    <div class="viewer-container">
        <div class="datasets-sidebar">
            <h3>Available Datasets</h3>
            <div id="datasets-list">
                {% for dataset in datasets %}
                    <div class="dataset-item" draggable="true" data-dataset-id="{{ dataset.id }}">
                        {{ dataset.name }}
                    </div>
                {% endfor %}
            </div>
        </div>
        <div class="map-container">
            <button id="export-pdf" class="export-button">
                <i class="fas fa-file-pdf"></i> Export to PDF
            </button>
            <div id="map"></div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/ol@v7.4.0/dist/ol.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize OpenLayers map
            const map = new ol.Map({
                target: 'map',
                layers: [
                    new ol.layer.Tile({
                        source: new ol.source.OSM()
                    })
                ],
                view: new ol.View({
                    center: ol.proj.fromLonLat([0, 0]),
                    zoom: 2
                })
            });

            // Drag and drop functionality
            const datasetItems = document.querySelectorAll('.dataset-item');
            datasetItems.forEach(item => {
                item.addEventListener('dragstart', function(e) {
                    e.dataTransfer.setData('text/plain', this.dataset.datasetId);
                });
            });

            const mapElement = document.getElementById('map');
            mapElement.addEventListener('dragover', function(e) {
                e.preventDefault();
            });

            mapElement.addEventListener('drop', function(e) {
                e.preventDefault();
                const datasetId = e.dataTransfer.getData('text/plain');
                loadDatasetLayer(datasetId);
            });

            function loadDatasetLayer(datasetId) {
                // TODO: Implement dataset layer loading
                // This will be implemented to load your GIS data
                console.log('Loading dataset:', datasetId);
            }

            // Add PDF export functionality
            document.getElementById('export-pdf').addEventListener('click', async function() {
                const button = this;
                button.disabled = true;
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Exporting...';
                
                try {
                    // Get map element
                    const mapElement = document.getElementById('map');
                    
                    // Get current view state
                    const view = map.getView();
                    const center = view.getCenter();
                    const zoom = view.getZoom();
                    const extent = view.calculateExtent(map.getSize());
                    
                    // Get visible layers
                    const visibleLayers = map.getLayers().getArray()
                        .filter(layer => layer.getVisible())
                        .map(layer => layer.get('title') || 'Unnamed Layer');
                    
                    // Capture map as image
                    const canvas = await html2canvas(mapElement, {
                        useCORS: true,
                        allowTaint: true,
                        backgroundColor: null
                    });
                    
                    // Create PDF
                    const { jsPDF } = window.jspdf;
                    const pdf = new jsPDF({
                        orientation: 'landscape',
                        unit: 'mm',
                        format: 'a4'
                    });
                    
                    // Add map image
                    const imgData = canvas.toDataURL('image/png');
                    const pdfWidth = pdf.internal.pageSize.getWidth();
                    const pdfHeight = pdf.internal.pageSize.getHeight();
                    const imgWidth = canvas.width;
                    const imgHeight = canvas.height;
                    const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);
                    const imgX = (pdfWidth - imgWidth * ratio) / 2;
                    const imgY = 20;
                    
                    pdf.addImage(imgData, 'PNG', imgX, imgY, imgWidth * ratio, imgHeight * ratio);
                    
                    // Add metadata
                    pdf.setFontSize(10);
                    pdf.text('Map Export Information', 20, pdfHeight - 60);
                    pdf.text(`Center: ${ol.proj.transform(center, 'EPSG:3857', 'EPSG:4326').map(coord => coord.toFixed(4)).join(', ')}`, 20, pdfHeight - 50);
                    pdf.text(`Zoom Level: ${zoom.toFixed(2)}`, 20, pdfHeight - 40);
                    pdf.text('Visible Layers:', 20, pdfHeight - 30);
                    visibleLayers.forEach((layer, index) => {
                        pdf.text(`- ${layer}`, 25, pdfHeight - 20 + (index * 5));
                    });
                    
                    // Add timestamp
                    const now = new Date();
                    pdf.text(`Exported on: ${now.toLocaleString()}`, 20, pdfHeight - 10);
                    
                    // Save PDF
                    pdf.save('map-export.pdf');
                    
                    button.innerHTML = '<i class="fas fa-file-pdf"></i> Export to PDF';
                } catch (error) {
                    console.error('Error exporting PDF:', error);
                    button.innerHTML = '<i class="fas fa-exclamation-circle"></i> Export Failed';
                    setTimeout(() => {
                        button.innerHTML = '<i class="fas fa-file-pdf"></i> Export to PDF';
                    }, 2000);
                } finally {
                    button.disabled = false;
                }
            });
        });
    </script>
{% endblock %} 