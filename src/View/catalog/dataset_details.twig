{% extends "layout.twig" %}

{% block title %}{{ dataset.title }} - {% if is_public_view %}Public{% else %}GIS{% endif %} Dataset{% endblock %}

{% block stylesheets %}
{{ parent() }}

    <!-- OpenLayers CSS -->
    <link rel="stylesheet" href="https://unpkg.com/ol@7.4.0/ol.css">
    <style>
        #map {
            width: 100%;
            height: 400px;
            border: 1px solid #e5e7eb;
            border-radius: 0.5rem;
            margin-bottom: 1.5rem;
        }
        .metadata-section {
            background-color: white;
            border: 1px solid #e5e7eb;
            border-radius: 0.5rem;
            margin-bottom: 1.5rem;
            overflow: hidden;
        }
        .metadata-section:nth-child(odd) {
            background-color: #f9fafb;
        }
        .metadata-section h2 {
            background-color: #f3f4f6;
            color: #1f2937;
            padding: 1rem 1.5rem;
            margin: 0;
            font-size: 1.25rem;
            font-weight: 600;
            border-bottom: 1px solid #e5e7eb;
        }
        .metadata-table {
            width: 100%;
            border-collapse: collapse;
        }
        .metadata-table tr {
            border-bottom: 1px solid #e5e7eb;
        }
        .metadata-table tr:last-child {
            border-bottom: none;
        }
        .metadata-table tr:nth-child(even) {
            background-color: #f9fafb;
        }
        .metadata-table th {
            width: 25%;
            padding: 1rem 1.5rem;
            text-align: left;
            font-weight: 500;
            color: #374151;
            vertical-align: top;
            background-color: #f3f4f6;
        }
        .metadata-table td {
            width: 75%;
            padding: 1rem 1.5rem;
            vertical-align: top;
            color: #1f2937;
            font-size: 0.875rem;
            line-height: 1.25rem;
        }
        .metadata-table td a {
            color: #2563eb;
            text-decoration: none;
        }
        .metadata-table td a:hover {
            text-decoration: underline;
        }
        .quality-score {
            display: inline-flex;
            align-items: center;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            font-weight: 500;
            background-color: #f3f4f6;
        }
        .quality-score .score-bar {
            width: 100px;
            height: 0.5rem;
            background-color: #e5e7eb;
            border-radius: 9999px;
            margin: 0 0.5rem;
            overflow: hidden;
        }
        .quality-score .score-fill {
            height: 100%;
            border-radius: 9999px;
            transition: width 0.3s ease;
        }
        .quality-score.high .score-fill {
            background-color: #10b981;
        }
        .quality-score.medium .score-fill {
            background-color: #f59e0b;
        }
        .quality-score.low .score-fill {
            background-color: #ef4444;
        }
        .harvest-source {
            display: inline-flex;
            align-items: center;
            padding: 0.25rem 0.75rem;
            background-color: #f3f4f6;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            color: #4b5563;
        }
        .harvest-source svg {
            width: 1rem;
            height: 1rem;
            margin-right: 0.5rem;
        }
        .document-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        .document-list li {
            display: flex;
            align-items: center;
            padding: 0.75rem;
            border-bottom: 1px solid #e5e7eb;
        }
        .document-list li:last-child {
            border-bottom: none;
        }
        .document-list li a {
            display: flex;
            align-items: center;
            color: #2563eb;
            text-decoration: none;
        }
        .document-list li a:hover {
            text-decoration: underline;
        }
        .document-list li svg {
            width: 1.25rem;
            height: 1.25rem;
            margin-right: 0.5rem;
        }
        /* Popup styles */
        .ol-popup {
            max-width: 400px;
            max-height: 300px;
            overflow-y: auto;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            background-color: white;
            border-radius: 4px;
        }
        .ol-popup-content {
            padding: 0.5rem;
            background-color: white;
        }
        .ol-popup-content p {
            margin: 0.25rem 0;
            font-size: 0.875rem;
            line-height: 1.25rem;
        }
        .ol-popup-content p:not(:last-child) {
            border-bottom: 1px solid #e5e7eb;
            padding-bottom: 0.25rem;
        }
    </style>
{% endblock %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="mb-8">
        <a href="{% if is_public_view %}/public{% else %}/catalog{% endif %}" class="text-blue-600 hover:text-blue-900">&larr; Back to {% if is_public_view %}Public Datasets{% else %}Catalog{% endif %}</a>
    </div>

    <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex justify-between items-start mb-6">
            <div>
                <h1 class="text-3xl font-bold text-gray-900">{{ dataset.title }}</h1>
                {% if dataset.description %}
                <p class="mt-2 text-gray-600">{{ dataset.description }}</p>
                {% endif %}
                {% if dataset.thumbnail_path %}
                <div class="mt-4">
                    <img src="/assets/thumbnails/{{ dataset.thumbnail_path }}" 
                         alt="Dataset Thumbnail" 
                         class="max-w-xs rounded-lg shadow-md border border-gray-200"
                         style="max-height: 200px; object-fit: contain;">
                </div>
                {% endif %}
                {% if dataset.harvest_source_name %}
                <div class="mt-2">
                    <span class="harvest-source">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                        </svg>
                        Source: {{ dataset.harvest_source_name }}
                    </span>
                </div>
                {% endif %}
            </div>
            <div class="flex items-center space-x-4">
                {% if dataset.quality_score is defined %}
                <div class="quality-score {% if dataset.quality_score >= 80 %}high{% elseif dataset.quality_score >= 50 %}medium{% else %}low{% endif %}">
                    <span>Quality Score:</span>
                    <div class="score-bar">
                        <div class="score-fill" style="width: {{ dataset.quality_score }}%"></div>
                    </div>
                    <span>{{ dataset.quality_score }}%</span>
                </div>
                {% endif %}
                
                {% if not is_public_view %}
                <!-- Public Status Toggle -->
                <label class="relative inline-flex items-center cursor-pointer">
                    <input type="checkbox" id="public-status-toggle" class="sr-only peer" {% if dataset.is_public %}checked{% endif %} onchange="togglePublicStatus(this, {{ dataset.id }})">
                    <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                    <span class="ml-3 text-sm font-medium text-gray-900">Public Dataset</span>
                </label>

                <!-- Status Dropdown -->
                <select id="status-select" class="form-select text-sm" onchange="updateStatus(this.value, {{ dataset.id }})">
                    <option value="draft" {% if dataset.status == 'draft' %}selected{% endif %}>Draft</option>
                    <option value="published" {% if dataset.status == 'published' %}selected{% endif %}>Published</option>
                    <option value="archived" {% if dataset.status == 'archived' %}selected{% endif %}>Archived</option>
                </select>
                {% endif %}

                {% if not dataset.harvest_source_name and not is_public_view %}
                <!-- Edit and Delete for manual datasets -->
                <a href="/catalog/{{ dataset.id }}/edit" class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    Edit
                </a>
                <form action="/catalog/{{ dataset.id }}/delete" method="POST" class="inline">
                    <button type="submit"
                        class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                        onclick="return confirm('Are you sure you want to delete this dataset?')">
                        Delete
                    </button>
                </form>
                {% endif %}
            </div>
        </div>

        {% if dataset.metadata_xml %}
            {% set xml = dataset.metadata_xml|raw %}
            {% set is_iso19115 = dataset.metadata_standard == 'ISO 19115' %}
            
            <!-- Basic Information -->
            <div class="metadata-section">
                <h2>Basic Information</h2>
                <table class="metadata-table">
                    <tr>
                        <th>Abstract</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:abstract/gco:CharacterString') }}
                            {% else %}
                                {{ xml|extract_xml_value('//identification/abstract') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Purpose</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:purpose/gco:CharacterString') }}
                            {% else %}
                                {{ xml|extract_xml_value('//identification/purpose') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Keywords</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:keyword/gco:CharacterString') }}
                            {% else %}
                                {{ xml|extract_xml_value('//identification/keywords') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Topic Category</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:topicCategory/gmd:MD_TopicCategoryCode') }}
                            {% else %}
                                {{ xml|extract_xml_value('//identification/topicCategory') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Metadata Standard</th>
                        <td>{{ dataset.metadata_standard }} (Version {{ dataset.metadata_version }})</td>
                    </tr>
                </table>
            </div>

            <!-- Public Documents -->
            {% if documents is defined and documents|length > 0 %}
            <div class="metadata-section">
                <h2>Public Documents</h2>
                <ul class="document-list">
                    {% for document in documents %}
                    <li>
                        <a href="{{ document.url }}" target="_blank" rel="noopener noreferrer">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                            </svg>
                            {{ document.title }}
                        </a>
                    </li>
                    {% endfor %}
                </ul>
            </div>
            {% endif %}

            <!-- Spatial Information -->
            <div class="metadata-section">
                <h2>Spatial Information</h2>
                <table class="metadata-table">
                    <tr>
                        <th>Spatial Extent</th>
                        <td>
                            {% set west = xml|extract_xml_value('//gmd:westBoundLongitude/gco:Decimal') %}
                            {% set east = xml|extract_xml_value('//gmd:eastBoundLongitude/gco:Decimal') %}
                            {% set south = xml|extract_xml_value('//gmd:southBoundLatitude/gco:Decimal') %}
                            {% set north = xml|extract_xml_value('//gmd:northBoundLatitude/gco:Decimal') %}
                            {% if west and east and south and north %}
                                {{ west }}°W to {{ east }}°E, {{ south }}°S to {{ north }}°N
                            {% else %}
                                Not specified
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Coordinate Reference System</th>
                        <td>
                            {{ xml|extract_xml_value('//gmd:referenceSystemInfo//gmd:code//gco:CharacterString')|default('EPSG:4326') }}
                        </td>
                    </tr>
                    <tr>
                        <th>CRS Type</th>
                        <td>
                            {{ xml|extract_xml_value('//gmd:referenceSystemInfo//gmd:referenceSystemType//gmd:MD_ReferenceSystemTypeCode')|default('geographic') }}
                        </td>
                    </tr>
                    <tr>
                        <th>Spatial Resolution</th>
                        <td>
                            {% set distance = xml|extract_xml_value('//gmd:spatialResolution[1]//gmd:distance//gco:Distance') %}
                            {% set units = xml|extract_xml_value('//gmd:spatialResolution[1]//gmd:distance//gco:Distance/@uom') %}
                            {% if distance and units %}
                                {{ distance }} {{ units }}
                            {% else %}
                                Not specified
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Vertical Resolution</th>
                        <td>
                            {% set distance = xml|extract_xml_value('//gmd:spatialResolution[2]//gmd:vertical//gco:Distance') %}
                            {% set units = xml|extract_xml_value('//gmd:spatialResolution[2]//gmd:vertical//gco:Distance/@uom') %}
                            {% if distance and units %}
                                {{ distance }} {{ units }}
                            {% else %}
                                Not specified
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Spatial Representation Type</th>
                        <td>
                            {{ xml|extract_xml_value('//gmd:spatialRepresentationType//gmd:MD_SpatialRepresentationTypeCode')|default('vector') }}
                        </td>
                    </tr>
                </table>
                <div id="map" style="height: 400px; margin-top: 1rem;"></div>
            </div>

            <!-- Temporal Information -->
            <div class="metadata-section">
                <h2>Temporal Information</h2>
                <table class="metadata-table">
                    <tr>
                        <th>Start Date</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:temporalElement/gmd:EX_TemporalExtent/gmd:extent/gml:TimePeriod/gml:beginPosition') }}
                            {% else %}
                                {{ xml|extract_xml_value('//temporal/startDate') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>End Date</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:temporalElement/gmd:EX_TemporalExtent/gmd:extent/gml:TimePeriod/gml:endPosition') }}
                            {% else %}
                                {{ xml|extract_xml_value('//temporal/endDate') }}
                            {% endif %}
                        </td>
                    </tr>
                </table>
            </div>

            <!-- Responsible Parties -->
            <div class="metadata-section">
                <h2>Responsible Parties</h2>
                <table class="metadata-table">
                    <tr>
                        <th>Point of Contact Name</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:contact/gmd:CI_ResponsibleParty/gmd:individualName/gco:CharacterString') }}
                            {% else %}
                                {{ xml|extract_xml_value('//responsibleParties/pointOfContactName') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Point of Contact Organization</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:contact/gmd:CI_ResponsibleParty/gmd:organisationName/gco:CharacterString') }}
                            {% else %}
                                {{ xml|extract_xml_value('//responsibleParties/pointOfContactOrg') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Point of Contact Email</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:contact/gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address/gmd:electronicMailAddress/gco:CharacterString') }}
                            {% else %}
                                {{ xml|extract_xml_value('//responsibleParties/pointOfContactEmail') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Point of Contact Role</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:contact/gmd:CI_ResponsibleParty/gmd:role/gmd:CI_RoleCode') }}
                            {% else %}
                                {{ xml|extract_xml_value('//responsibleParties/pointOfContactRole') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Publisher Name</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:citedResponsibleParty/gmd:CI_ResponsibleParty/gmd:individualName/gco:CharacterString') }}
                            {% else %}
                                {{ xml|extract_xml_value('//responsibleParties/publisherName') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Publisher Organization</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:citedResponsibleParty/gmd:CI_ResponsibleParty/gmd:organisationName/gco:CharacterString') }}
                            {% else %}
                                {{ xml|extract_xml_value('//responsibleParties/publisherOrg') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Publisher Role</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:citedResponsibleParty/gmd:CI_ResponsibleParty/gmd:role/gmd:CI_RoleCode') }}
                            {% else %}
                                {{ xml|extract_xml_value('//responsibleParties/publisherRole') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Metadata Point of Contact</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:pointOfContact/gmd:CI_ResponsibleParty/gmd:individualName/gco:CharacterString') }}
                            {% else %}
                                {{ xml|extract_xml_value('//responsibleParties/metadataPointOfContact') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Metadata Point of Contact Role</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:pointOfContact/gmd:CI_ResponsibleParty/gmd:role/gmd:CI_RoleCode') }}
                            {% else %}
                                {{ xml|extract_xml_value('//responsibleParties/metadataPointOfContactRole') }}
                            {% endif %}
                        </td>
                    </tr>
                </table>
            </div>

            <!-- Data Quality -->
            <div class="metadata-section">
                <h2>Data Quality</h2>
                <table class="metadata-table">
                    <tr>
                        <th>Lineage</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:lineage/gmd:LI_Lineage/gmd:statement/gco:CharacterString') }}
                            {% else %}
                                {{ xml|extract_xml_value('//dataQuality/lineage') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Scope</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:scope/gmd:DQ_Scope/gmd:level/gmd:MD_ScopeCode') }}
                            {% else %}
                                {{ xml|extract_xml_value('//dataQuality/scope') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Conformity</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:report/gmd:DQ_DomainConsistency/gmd:result/gmd:DQ_ConformanceResult/gmd:explanation/gco:CharacterString') }}
                            {% else %}
                                {{ xml|extract_xml_value('//dataQuality/conformity') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Completeness</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:report/gmd:DQ_Completeness/gmd:result/gmd:DQ_QuantitativeResult/gmd:value/gco:Record') }}
                            {% else %}
                                {{ xml|extract_xml_value('//dataQuality/completeness') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Logical Consistency</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:report/gmd:DQ_LogicalConsistency/gmd:result/gmd:DQ_QuantitativeResult/gmd:value/gco:Record') }}
                            {% else %}
                                {{ xml|extract_xml_value('//dataQuality/logicalConsistency') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Positional Accuracy</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:report/gmd:DQ_PositionalAccuracy/gmd:result/gmd:DQ_QuantitativeResult/gmd:value/gco:Record') }}
                            {% else %}
                                {{ xml|extract_xml_value('//dataQuality/positionalAccuracy') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Temporal Accuracy</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:report/gmd:DQ_TemporalAccuracy/gmd:result/gmd:DQ_QuantitativeResult/gmd:value/gco:Record') }}
                            {% else %}
                                {{ xml|extract_xml_value('//dataQuality/temporalAccuracy') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Thematic Accuracy</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:report/gmd:DQ_ThematicAccuracy/gmd:result/gmd:DQ_QuantitativeResult/gmd:value/gco:Record') }}
                            {% else %}
                                {{ xml|extract_xml_value('//dataQuality/thematicAccuracy') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Quality Level</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:scope/gmd:DQ_Scope/gmd:levelDescription/gmd:MD_ScopeDescription/gmd:level/gmd:MD_ScopeCode') }}
                            {% else %}
                                {{ xml|extract_xml_value('//dataQuality/qualityLevel') }}
                            {% endif %}
                        </td>
                    </tr>
                </table>
            </div>

            <!-- Access and Use Constraints -->
            <div class="metadata-section">
                <h2>Access and Use Constraints</h2>
                <table class="metadata-table">
                    <tr>
                        <th>Use Limitation</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceConstraints/gmd:MD_Constraints/gmd:useLimitation/gco:CharacterString')|default(xml|extract_xml_value('//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceConstraints/gmd:MD_LegalConstraints/gmd:useLimitation/gco:CharacterString'))|default(xml|extract_xml_value('//constraints/useLimitation')) }}
                            {% else %}
                                {{ xml|extract_xml_value('//constraints/useLimitation') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Access Constraints</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceConstraints/gmd:MD_LegalConstraints/gmd:accessConstraints/gmd:MD_RestrictionCode')|default(xml|extract_xml_value('//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceConstraints/gmd:MD_Constraints/gmd:accessConstraints/gco:CharacterString'))|default(xml|extract_xml_value('//constraints/accessConstraints')) }}
                            {% else %}
                                {{ xml|extract_xml_value('//constraints/accessConstraints') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Use Constraints</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceConstraints/gmd:MD_LegalConstraints/gmd:useConstraints/gmd:MD_RestrictionCode')|default(xml|extract_xml_value('//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceConstraints/gmd:MD_Constraints/gmd:useConstraints/gco:CharacterString'))|default(xml|extract_xml_value('//constraints/useConstraints')) }}
                            {% else %}
                                {{ xml|extract_xml_value('//constraints/useConstraints') }}
                            {% endif %}
                        </td>
                    </tr>
                </table>
            </div>

            <!-- Distribution -->
            <div class="metadata-section">
                <h2>Distribution</h2>
                <table class="metadata-table">
                    <tr>
                        <th>Distribution URL</th>
                        <td>
                            {% if is_iso19115 %}
                                {% set url = xml|extract_xml_value('//gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource/gmd:linkage/gmd:URL') %}
                                {% if url %}
                                    <a href="{{ url }}" target="_blank" rel="noopener noreferrer">{{ url }}</a>
                                {% endif %}
                            {% else %}
                                {% set url = xml|extract_xml_value('//distribution/url') %}
                                {% if url %}
                                    <a href="{{ url }}" target="_blank" rel="noopener noreferrer">{{ url }}</a>
                                {% endif %}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Distribution Format</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:distributionInfo/gmd:MD_Distribution/gmd:distributionFormat/gmd:MD_Format/gmd:name/gco:CharacterString') }}
                            {% else %}
                                {{ xml|extract_xml_value('//distribution/format') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Format Version</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:distributionInfo/gmd:MD_Distribution/gmd:distributionFormat/gmd:MD_Format/gmd:version/gco:CharacterString') }}
                            {% else %}
                                {{ xml|extract_xml_value('//distribution/formatVersion') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Distribution Size</th>
                        <td>
                            {% if is_iso19115 %}
                                {% set size = xml|extract_xml_value('//gmd:distributionInfo/gmd:MD_Distribution/gmd:distributionFormat/gmd:MD_Format/gmd:fileSize/gco:Real')|default(xml|extract_xml_value('//gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:transferSize/gco:Real'))|default(xml|extract_xml_value('//gmd:distributionInfo/gmd:MD_Distribution/gmd:distributionFormat/gmd:MD_Format/gmd:fileSize/gco:Decimal'))|default(xml|extract_xml_value('//gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:transferSize/gco:Decimal'))|default(xml|extract_xml_value('//distribution/size')) %}
                                {% set units = xml|extract_xml_value('//gmd:distributionInfo/gmd:MD_Distribution/gmd:distributionFormat/gmd:MD_Format/gmd:fileSize/gco:Real/@uom')|default(xml|extract_xml_value('//gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:transferSize/gco:Real/@uom'))|default(xml|extract_xml_value('//gmd:distributionInfo/gmd:MD_Distribution/gmd:distributionFormat/gmd:MD_Format/gmd:fileSize/gco:Decimal/@uom'))|default(xml|extract_xml_value('//gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:transferSize/gco:Decimal/@uom'))|default(xml|extract_xml_value('//distribution/units')) %}
                                {% if size %}
                                    {{ size }}{% if units %} {{ units }}{% endif %}
                                {% else %}
                                    Not specified
                                {% endif %}
                            {% else %}
                                {% set size = xml|extract_xml_value('//distribution/size') %}
                                {% set units = xml|extract_xml_value('//distribution/units') %}
                                {% if size %}
                                    {{ size }}{% if units %} {{ units }}{% endif %}
                                {% else %}
                                    Not specified
                                {% endif %}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Transfer Options</th>
                        <td>
                            {% if is_iso19115 %}
                                {% set transferOptions = xml|extract_xml_value('//gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource/gmd:description/gco:CharacterString')|default(xml|extract_xml_value('//gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource/gmd:protocol/gco:CharacterString'))|default(xml|extract_xml_value('//gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource/gmd:name/gco:CharacterString'))|default(xml|extract_xml_value('//distribution/transferOptions')) %}
                                {% if transferOptions %}
                                    {{ transferOptions }}
                                {% else %}
                                    Not specified
                                {% endif %}
                            {% else %}
                                {{ xml|extract_xml_value('//distribution/transferOptions')|default('Not specified') }}
                            {% endif %}
                        </td>
                    </tr>
                </table>
            </div>

            <!-- Maintenance -->
            <div class="metadata-section">
                <h2>Maintenance</h2>
                <table class="metadata-table">
                    <tr>
                        <th>Update Frequency</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceMaintenance/gmd:MD_MaintenanceInformation/gmd:maintenanceAndUpdateFrequency/gmd:MD_MaintenanceFrequencyCode') }}
                            {% else %}
                                {{ xml|extract_xml_value('//maintenance/updateFrequency') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Maintenance Notes</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceMaintenance/gmd:MD_MaintenanceInformation/gmd:maintenanceNote/gco:CharacterString') }}
                            {% else %}
                                {{ xml|extract_xml_value('//maintenance/maintenanceNotes') }}
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Last Maintenance Date</th>
                        <td>
                            {% if is_iso19115 %}
                                {{ xml|extract_xml_value('//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceMaintenance/gmd:MD_MaintenanceInformation/gmd:dateOfNextUpdate/gco:Date') }}
                            {% else %}
                                {{ xml|extract_xml_value('//maintenance/lastMaintenanceDate') }}
                            {% endif %}
                        </td>
                    </tr>
                </table>
            </div>

            <!-- Raw Metadata -->
            <div class="metadata-section">
                <h2>Raw Metadata</h2>
                <div class="bg-gray-50 p-4 rounded-lg">
                    <pre class="text-sm overflow-x-auto whitespace-pre-wrap font-mono">{{ dataset.metadata_xml|escape('html') }}</pre>
                </div>
            </div>
        {% else %}
            <div class="text-red-600">No metadata available for this dataset.</div>
        {% endif %}
    </div>
</div>

<script src="https://unpkg.com/ol@7.4.0/dist/ol.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize map
    const map = new ol.Map({
        target: 'map',
        layers: [
            new ol.layer.Tile({
                source: new ol.source.OSM()
            })
        ],
        view: new ol.View({
            center: ol.proj.fromLonLat([0, 0]),
            zoom: 2
        }),
        controls: [
            new ol.control.Zoom(),
            new ol.control.ScaleLine(),
            new ol.control.FullScreen(),
            new ol.control.ZoomSlider()
        ]
    });

    // Add WMS layer if available
    {% if dataset.wms_url and dataset.wms_layer %}
        // Format WMS URL to ensure it ends with /wms
        let wmsUrl = '{{ dataset.wms_url }}';
        if (!wmsUrl.endsWith('/wms')) {
            wmsUrl = wmsUrl.endsWith('/') ? 
                wmsUrl + 'wms' : 
                wmsUrl + '/wms';
        }

        const wmsLayerName = '{{ dataset.wms_layer }}';
        const wmsLayer = new ol.layer.Tile({
            source: new ol.source.TileWMS({
                url: wmsUrl,
                params: {
                    'LAYERS': wmsLayerName,
                    'TILED': true,
                    'FORMAT': 'image/png',
                    'TRANSPARENT': true
                },
                serverType: 'geoserver',
                crossOrigin: 'anonymous'
            }),
            title: '{{ dataset.title }}',
            opacity: 0.8
        });
        map.addLayer(wmsLayer);

        // Add layer switcher
        const layerSwitcher = document.createElement('div');
        layerSwitcher.className = 'ol-control layer-switcher';
        layerSwitcher.innerHTML = `
            <button type="button" class="layer-toggle">
                <span class="layer-name">Toggle Layer</span>
            </button>
        `;
        map.addControl(new ol.control.Control({
            element: layerSwitcher
        }));

        const toggleButton = layerSwitcher.querySelector('.layer-toggle');
        toggleButton.addEventListener('click', () => {
            const visible = wmsLayer.getVisible();
            wmsLayer.setVisible(!visible);
            toggleButton.classList.toggle('active', !visible);
        });

        // Fetch WMS GetCapabilities and fit to layer extent
        (async function() {
            let fitDone = false;
            try {
                const capabilitiesUrl = wmsUrl + '?service=WMS&request=GetCapabilities';
                const response = await fetch(capabilitiesUrl);
                const text = await response.text();
                const parser = new DOMParser();
                const xml = parser.parseFromString(text, 'application/xml');
                
                // Find the correct <Layer> element
                let foundLayer = null;
                const layers = xml.querySelectorAll('Layer[queryable], Layer:not([queryable])');
                layers.forEach(layer => {
                    const name = layer.querySelector('Name');
                    if (name && name.textContent.trim() === wmsLayerName) {
                        foundLayer = layer;
                    }
                });

                if (foundLayer) {
                    // Try EX_GeographicBoundingBox first
                    let west, east, south, north;
                    const exBBox = foundLayer.querySelector('EX_GeographicBoundingBox');
                    if (exBBox) {
                        west = parseFloat(exBBox.querySelector('westBoundLongitude').textContent);
                        east = parseFloat(exBBox.querySelector('eastBoundLongitude').textContent);
                        south = parseFloat(exBBox.querySelector('southBoundLatitude').textContent);
                        north = parseFloat(exBBox.querySelector('northBoundLatitude').textContent);
                    } else {
                        // Try BoundingBox with CRS/EPSG:4326
                        const bbox = Array.from(foundLayer.querySelectorAll('BoundingBox')).find(b => 
                            b.getAttribute('CRS') === 'EPSG:4326' || b.getAttribute('SRS') === 'EPSG:4326'
                        );
                        if (bbox) {
                            west = parseFloat(bbox.getAttribute('minx'));
                            east = parseFloat(bbox.getAttribute('maxx'));
                            south = parseFloat(bbox.getAttribute('miny'));
                            north = parseFloat(bbox.getAttribute('maxy'));
                        }
                    }

                    if (west !== undefined && east !== undefined && south !== undefined && north !== undefined) {
                        const extent = ol.proj.transformExtent([
                            west, south, east, north
                        ], 'EPSG:4326', 'EPSG:3857');
                        map.getView().fit(extent, { 
                            padding: [50, 50, 50, 50],
                            maxZoom: 18
                        });
                        fitDone = true;
                    }
                }
            } catch (e) {
                console.warn('Could not fetch or parse WMS GetCapabilities for extent:', e);
            }

            if (!fitDone) {
                // Fallback: use spatial extent from metadata
                const west = parseFloat('{{ xml|extract_xml_value("//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:geographicElement/gmd:EX_GeographicBoundingBox/gmd:westBoundLongitude/gco:Decimal") }}');
                const east = parseFloat('{{ xml|extract_xml_value("//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:geographicElement/gmd:EX_GeographicBoundingBox/gmd:eastBoundLongitude/gco:Decimal") }}');
                const south = parseFloat('{{ xml|extract_xml_value("//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:geographicElement/gmd:EX_GeographicBoundingBox/gmd:southBoundLatitude/gco:Decimal") }}');
                const north = parseFloat('{{ xml|extract_xml_value("//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:geographicElement/gmd:EX_GeographicBoundingBox/gmd:northBoundLatitude/gco:Decimal") }}');

                if (!isNaN(west) && !isNaN(east) && !isNaN(south) && !isNaN(north)) {
                    const extent = ol.proj.transformExtent([
                        west, south, east, north
                    ], 'EPSG:4326', 'EPSG:3857');
                    map.getView().fit(extent, { 
                        padding: [50, 50, 50, 50],
                        maxZoom: 18
                    });
                }
            }
        })();

        // Add click handler for WMS layer
        map.on('click', async function(evt) {
            const viewResolution = map.getView().getResolution();
            const wmsSource = wmsLayer.getSource();
            const url = wmsSource.getFeatureInfoUrl(
                evt.coordinate,
                viewResolution,
                'EPSG:3857',
                {
                    'INFO_FORMAT': 'application/json',
                    'FEATURE_COUNT': 1
                }
            );

            if (url) {
                try {
                    const response = await fetch(url);
                    const data = await response.json();
                    if (data.features && data.features.length > 0) {
                        const feature = data.features[0];
                        const properties = feature.properties;
                        
                        // Create popup content
                        const content = document.createElement('div');
                        content.className = 'ol-popup-content';
                        
                        // Add properties to popup
                        for (const [key, value] of Object.entries(properties)) {
                            if (value !== null && value !== undefined) {
                                const p = document.createElement('p');
                                p.innerHTML = `<strong>${key}:</strong> ${value}`;
                                content.appendChild(p);
                            }
                        }

                        // Create and show popup
                        const popup = new ol.Overlay({
                            element: document.createElement('div'),
                            positioning: 'bottom-center',
                            offset: [0, -10],
                            autoPan: true
                        });
                        popup.getElement().className = 'ol-popup';
                        popup.getElement().appendChild(content);
                        popup.setPosition(evt.coordinate);
                        map.addOverlay(popup);

                        // Close popup on click
                        map.once('click', function() {
                            map.removeOverlay(popup);
                        });
                    }
                } catch (e) {
                    console.warn('Error fetching feature info:', e);
                }
            }
        });
    {% else %}
        // Add extent box using spatial extent from metadata
        const west = parseFloat('{{ xml|extract_xml_value("//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:geographicElement/gmd:EX_GeographicBoundingBox/gmd:westBoundLongitude/gco:Decimal") }}');
        const east = parseFloat('{{ xml|extract_xml_value("//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:geographicElement/gmd:EX_GeographicBoundingBox/gmd:eastBoundLongitude/gco:Decimal") }}');
        const south = parseFloat('{{ xml|extract_xml_value("//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:geographicElement/gmd:EX_GeographicBoundingBox/gmd:southBoundLatitude/gco:Decimal") }}');
        const north = parseFloat('{{ xml|extract_xml_value("//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:geographicElement/gmd:EX_GeographicBoundingBox/gmd:northBoundLatitude/gco:Decimal") }}');

        if (!isNaN(west) && !isNaN(east) && !isNaN(south) && !isNaN(north)) {
            const extent = ol.proj.transformExtent([
                west, south, east, north
            ], 'EPSG:4326', 'EPSG:3857');

            const extentSource = new ol.source.Vector();
            const extentLayer = new ol.layer.Vector({
                source: extentSource,
                style: new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: 'rgba(0, 0, 255, 1.0)',
                        width: 2
                    }),
                    fill: new ol.style.Fill({
                        color: 'rgba(0, 0, 255, 0.1)'
                    })
                })
            });
            map.addLayer(extentLayer);

            const extentBox = new ol.Feature({
                geometry: new ol.geom.Polygon.fromExtent(extent)
            });
            extentSource.addFeature(extentBox);
            map.getView().fit(extent, { 
                padding: [50, 50, 50, 50],
                maxZoom: 18
            });
        }
    {% endif %}
});

{% if not is_public_view %}
// Toggle Public Status (JavaScript function)
function togglePublicStatus(checkbox, datasetId) {
    const isPublic = checkbox.checked;
    const formData = new FormData();
    formData.append('is_public', isPublic ? '1' : '0');
    
    // Disable the checkbox while the request is processing
    checkbox.disabled = true;
    
    fetch("/catalog/" + datasetId + "/public-status", {
        method: "POST",
        body: formData
    })
    .then(resp => {
        if (!resp.ok) {
            throw new Error('Network response was not ok');
        }
        return resp.json();
    })
    .then(data => { 
        if (data.error) { 
            alert(data.error); 
            checkbox.checked = !isPublic;
        } else {
            // On success, refresh the page to show updated state
            window.location.reload();
        }
    })
    .catch(err => { 
        console.error("Error toggling public status:", err); 
        alert("Error toggling public status. Please try again."); 
        checkbox.checked = !isPublic;
    })
    .finally(() => {
        // Re-enable the checkbox
        checkbox.disabled = false;
    });
}

// Update Status (JavaScript function)
function updateStatus(status, datasetId) {
    const formData = new FormData();
    formData.append('status', status);
    
    fetch("/catalog/" + datasetId + "/status", {
        method: "POST",
        body: formData
    })
    .then(resp => {
        if (!resp.ok) {
            throw new Error('Network response was not ok');
        }
        return resp.json();
    })
    .then(data => {
        if (data.error) {
            alert(data.error);
            // Reset the select to its previous value
            document.getElementById('status-select').value = '{{ dataset.status }}';
        } else {
            // On success, refresh the page to show updated state
            window.location.reload();
        }
    })
    .catch(err => {
        console.error("Error updating status:", err);
        alert("Error updating status. Please try again.");
        // Reset the select to its previous value
        document.getElementById('status-select').value = '{{ dataset.status }}';
    });
}
{% endif %}
</script>
{% endblock %} 