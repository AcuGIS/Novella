{% extends "layout.twig" %}

{% block title %}Harvest Progress{% endblock %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex items-center justify-between mb-6">
            <h1 class="text-2xl font-bold">Harvest Progress</h1>
            <div class="flex items-center space-x-4">
                <span id="status-badge" class="px-3 py-1 rounded-full text-sm font-medium bg-yellow-100 text-yellow-800">
                    In Progress
                </span>
                <button onclick="window.location.reload()" class="text-sm text-gray-600 hover:text-gray-800">
                    Refresh
                </button>
            </div>
        </div>

        <!-- Progress Bar -->
        <div class="w-full bg-gray-200 rounded-full h-2.5 mb-4">
            <div id="progress-bar" class="bg-blue-600 h-2.5 rounded-full transition-all duration-500" style="width: 0%"></div>
        </div>

        <!-- Status Text -->
        <p id="status-text" class="text-sm text-gray-600 mb-4">Initializing harvest process...</p>

        <!-- Stats -->
        <div class="grid grid-cols-4 gap-4 mb-6">
            <div class="bg-gray-50 p-4 rounded-lg">
                <h3 class="text-sm font-medium text-gray-500">Total Layers</h3>
                <p id="total-layers" class="text-2xl font-semibold text-gray-900">-</p>
            </div>
            <div class="bg-gray-50 p-4 rounded-lg">
                <h3 class="text-sm font-medium text-gray-500">Processed</h3>
                <p id="processed-count" class="text-2xl font-semibold text-gray-900">-</p>
            </div>
            <div class="bg-gray-50 p-4 rounded-lg">
                <h3 class="text-sm font-medium text-gray-500">Skipped</h3>
                <p id="skipped-count" class="text-2xl font-semibold text-gray-900">-</p>
            </div>
            <div class="bg-gray-50 p-4 rounded-lg">
                <h3 class="text-sm font-medium text-gray-500">Errors</h3>
                <p id="error-count" class="text-2xl font-semibold text-gray-900">-</p>
            </div>
        </div>

        <!-- Log Viewer -->
        <div class="bg-gray-100 rounded p-4 h-96 overflow-y-auto font-mono text-sm">
            <div id="log-content" class="space-y-1"></div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const progressBar = document.getElementById('progress-bar');
    const statusText = document.getElementById('status-text');
    const statusBadge = document.getElementById('status-badge');
    const logContent = document.getElementById('log-content');
    const totalLayers = document.getElementById('total-layers');
    const processedCount = document.getElementById('processed-count');
    const skippedCount = document.getElementById('skipped-count');
    const errorCount = document.getElementById('error-count');

    function addLogEntry(message, type = 'info') {
        const entry = document.createElement('div');
        entry.className = `text-${type === 'error' ? 'red' : 'gray'}-600`;
        entry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
        logContent.appendChild(entry);
        logContent.scrollTop = logContent.scrollHeight;
    }

    function updateProgress(data) {
        // Update progress bar
        progressBar.style.width = `${data.progress}%`;
        statusText.textContent = data.message;

        // Update stats
        if (data.stats) {
            totalLayers.textContent = data.stats.total_layers || '-';
            processedCount.textContent = data.stats.processed || '-';
            skippedCount.textContent = data.stats.skipped || '-';
            errorCount.textContent = data.stats.errors || '-';
        }

        // Update status badge
        if (data.status === 'completed') {
            statusBadge.className = 'px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800';
            statusBadge.textContent = 'Completed';
        } else if (data.status === 'failed') {
            statusBadge.className = 'px-3 py-1 rounded-full text-sm font-medium bg-red-100 text-red-800';
            statusBadge.textContent = 'Failed';
        }

        // Add logs
        if (data.logs) {
            data.logs.forEach(log => addLogEntry(log));
        }
    }

    function pollProgress() {
        const harvestId = window.location.pathname.split('/').pop();
        fetch(`/oai/harvest/progress/${harvestId}`)
            .then(response => response.json())
            .then(data => {
                updateProgress(data);
                
                if (data.status === 'completed' || data.status === 'failed') {
                    // Stop polling
                    return;
                }
                
                // Continue polling
                setTimeout(pollProgress, 2000);
            })
            .catch(error => {
                console.error('Error polling progress:', error);
                setTimeout(pollProgress, 5000);
            });
    }

    // Start polling
    pollProgress();
});
</script>
{% endblock %} 