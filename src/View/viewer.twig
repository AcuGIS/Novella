{% extends "layout.twig" %}

{% block title %}GIS Data Viewer{% endblock %}

{% block stylesheets %}
{{ parent() }}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ol@v7.4.0/ol.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ol-layerswitcher@4.1.1/dist/ol-layerswitcher.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<style>
#popup-content {
    max-height: 300px;
    overflow-y: auto;
}

li{
        cursor: pointer;
    }

a.span { cursor: pointer; }

.export-button {
    position: absolute;
    top: 10px;
    right: 10px;
    z-index: 1000;
    background: white;
    padding: 8px 12px;
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 6px;
    font-size: 14px;
    color: #333;
    border: 1px solid #ddd;
}

.export-button:hover {
    background: #f5f5f5;
}

.export-button i {
    font-size: 16px;
}

.tree-container {
    margin-bottom: 1.5rem;
}

.tree-header {
    cursor: pointer;
    user-select: none;
}

.accordion-content {
    display: none;
}

.accordion-content.expanded {
    display: block;
}

.accordion-header.collapsed .accordion-icon::before {
    content: '+';
}

.accordion-header.expanded .accordion-icon::before {
    content: '-';
}

.dataset-item {
    transition: all 0.2s ease-in-out;
}

.dataset-item:hover {
    transform: translateY(-1px);
}

.topic-header {
    transition: background-color 0.2s ease-in-out;
}

.border-cadetblue {
    border-color: #5f9ea0;
}

.text-cadetblue {
    color: #5f9ea0;
}

.line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.search-container {
    margin-bottom: 1rem;
    position: sticky;
    top: 0;
    background: #f8f9fa;
    padding: 10px 0;
    z-index: 10;
    display: flex;
    gap: 8px;
    align-items: center;
}

.search-input {
    flex: 1;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
    background: white;
}

.search-input:focus {
    outline: none;
    border-color: #5f9ea0;
    box-shadow: 0 0 0 2px rgba(95, 158, 160, 0.2);
}

.search-reset {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background: white;
    color: #666;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s;
}

.search-reset:hover {
    background: #f0f0f0;
    color: #333;
}

.search-reset i {
    font-size: 14px;
}

.pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 8px;
    margin-top: 1rem;
    padding: 0.5rem;
    background: white;
    border-radius: 4px;
    box-shadow: 0 1px 2px rgba(0,0,0,0.1);
}

.pagination-button {
    padding: 4px 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background: white;
    color: #666;
    cursor: pointer;
    font-size: 14px;
    transition: all 0.2s;
}

.pagination-button:hover:not(:disabled) {
    background: #f0f0f0;
    border-color: #5f9ea0;
    color: #5f9ea0;
}

.pagination-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.pagination-button.active {
    background: #5f9ea0;
    border-color: #5f9ea0;
    color: white;
}

.pagination-info {
    font-size: 14px;
    color: #666;
}
</style>
{% endblock %}

{% block content %}
<div class="flex h-screen">
    <!-- Sidebar -->
    <div class="w-80 bg-gray-100 p-4 overflow-y-auto">
        <!-- Search -->
        <div class="search-container">
            <input type="text" id="dataset-search" class="search-input" placeholder="Search datasets..." value="{{ search ?? '' }}">
            {% if search %}
            <button id="search-reset" class="search-reset" title="Reset search">
                <i class="fas fa-times"></i>
            </button>
            {% endif %}
        </div>

        <!-- Datasets Tree -->
        <div class="tree-container mb-4">
            <div class="tree-header bg-white rounded-lg shadow-sm p-3 mb-2">
                <h3 class="text-lg font-semibold text-gray-800 flex items-center">
                    <i class="fa-solid fa-up-down-left-right fa-xs mr-2 text-cadetblue"></i>
                    Drag Layers to Map
                </h3>
            </div>
            <div class="tree-content" id="datasets-tree">
                <div class="space-y-2">
                    {% set initialDatasets = datasets|slice(0, 5) %}
                    {% set remainingDatasets = datasets|slice(5) %}
                    
                    {% for dataset in initialDatasets %}
                    <div class="dataset-item bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 cursor-move"
                         draggable="true"
                         data-dataset-id="{{ dataset.id }}"
                         data-title="{{ dataset.title }}"
                         {% if dataset.wms_url %}data-wms-url="{{ dataset.wms_url }}"{% endif %}
                         {% if dataset.wms_layer %}data-wms-layer="{{ dataset.wms_layer }}"{% endif %}
                         {% if dataset.spatial_extent %}data-spatial-extent="{{ dataset.spatial_extent is iterable ? dataset.spatial_extent|json_encode : dataset.spatial_extent|escape('html_attr') }}"{% endif %}
                         {% if dataset.metadata_xml %}data-metadata-xml="{{ dataset.metadata_xml|escape('html_attr') }}"{% endif %}>
                        <div class="p-3 border-l-4 border-cadetblue hover:bg-gray-50">
                            <h3 class="text-sm font-medium text-gray-800">{{ dataset.title }}</h3>
                            {% if dataset.description %}
                            <p class="text-xs text-gray-600 mt-1 line-clamp-2">{{ dataset.description }}</p>
                            {% endif %}
                            {% if dataset.topics %}
                            <div class="mt-2 flex flex-wrap gap-1">
                                {% for topic in dataset.topics %}
                                <span class="text-xs px-2 py-1 bg-gray-100 text-gray-600 rounded-full">{{ topic.name }}</span>
                                {% endfor %}
                            </div>
                            {% endif %}
                        </div>
                    </div>
                    {% endfor %}

                    {% if remainingDatasets|length > 0 %}
                    <div class="more-datasets-container" style="display: none;">
                        {% set itemsPerPage = 20 %}
                        {% set totalPages = (remainingDatasets|length / itemsPerPage)|round(0, 'ceil') %}
                        {% for page in 1..totalPages %}
                            {% set start = (page - 1) * itemsPerPage %}
                            {% set end = min(start + itemsPerPage, remainingDatasets|length) %}
                            <div class="datasets-page" data-page="{{ page }}" style="display: {% if page == 1 %}block{% else %}none{% endif %}">
                                {% for dataset in remainingDatasets|slice(start, itemsPerPage) %}
                                <div class="dataset-item bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 cursor-move"
                                     draggable="true"
                                     data-dataset-id="{{ dataset.id }}"
                                     data-title="{{ dataset.title }}"
                                     {% if dataset.wms_url %}data-wms-url="{{ dataset.wms_url }}"{% endif %}
                                     {% if dataset.wms_layer %}data-wms-layer="{{ dataset.wms_layer }}"{% endif %}
                                     {% if dataset.spatial_extent %}data-spatial-extent="{{ dataset.spatial_extent is iterable ? dataset.spatial_extent|json_encode : dataset.spatial_extent|escape('html_attr') }}"{% endif %}
                                     {% if dataset.metadata_xml %}data-metadata-xml="{{ dataset.metadata_xml|escape('html_attr') }}"{% endif %}>
                                    <div class="p-3 border-l-4 border-cadetblue hover:bg-gray-50">
                                        <h3 class="text-sm font-medium text-gray-800">{{ dataset.title }}</h3>
                                        {% if dataset.description %}
                                        <p class="text-xs text-gray-600 mt-1 line-clamp-2">{{ dataset.description }}</p>
                                        {% endif %}
                                        {% if dataset.topics %}
                                        <div class="mt-2 flex flex-wrap gap-1">
                                            {% for topic in dataset.topics %}
                                            <span class="text-xs px-2 py-1 bg-gray-100 text-gray-600 rounded-full">{{ topic.name }}</span>
                                            {% endfor %}
                                        </div>
                                        {% endif %}
                                    </div>
                                </div>
                                {% endfor %}
                            </div>
                        {% endfor %}
                        
                        {% if totalPages > 1 %}
                        <div class="pagination">
                            <button class="pagination-button prev-page" disabled>Previous</button>
                            <span class="pagination-info">Page <span class="current-page">1</span> of {{ totalPages }}</span>
                            <button class="pagination-button next-page" {% if totalPages == 1 %}disabled{% endif %}>Next</button>
                        </div>
                        {% endif %}
                    </div>
                    <button class="more-datasets-btn w-full mt-2 px-4 py-2 text-sm font-medium text-cadetblue bg-white rounded-lg border border-cadetblue hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cadetblue transition-colors duration-200">
                        Show {{ remainingDatasets|length }} More Datasets
                    </button>
                    {% endif %}
                </div>
            </div>
        </div>

        <!-- Topics Tree -->
        <div class="tree-container">
            <div class="tree-header accordion-header collapsed bg-white rounded-lg shadow-sm p-3 mb-2" data-target="topics-tree">
                <h2 class="text-lg font-semibold text-gray-800 flex items-center">
                    <span class="accordion-icon mr-2 text-cadetblue"></span>
                    Topics
                </h2>
            </div>
            <div class="tree-content accordion-content collapsed" id="topics-tree">
                <div class="space-y-2">
                    {% for topic in topics %}
                    <div class="topic-item bg-white rounded-lg shadow-sm">
                        <div class="topic-header accordion-header collapsed p-3 border-l-4 border-cadetblue hover:bg-gray-50 cursor-pointer" data-target="topic-{{ topic.id }}">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center">
                                    <span class="accordion-icon text-cadetblue mr-2"></span>
                                    <span class="text-sm font-medium text-gray-800">{{ topic.name }}</span>
                                </div>
                                <span class="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded-full">
                                    {{ topic.datasets|length }} datasets
                                </span>
                            </div>
                        </div>
                        <div class="topic-content accordion-content collapsed" id="topic-{{ topic.id }}">
                            <div class="pl-4 pr-2 pb-2 space-y-2">
                                {% for dataset in datasets %}
                                    {% if dataset.id in topic.datasets %}
                                    <div class="dataset-item bg-gray-50 rounded hover:bg-gray-100 transition-colors duration-200 cursor-move"
                                         draggable="true"
                                         data-dataset-id="{{ dataset.id }}"
                                         data-title="{{ dataset.title }}"
                                         {% if dataset.wms_url %}data-wms-url="{{ dataset.wms_url }}"{% endif %}
                                         {% if dataset.wms_layer %}data-wms-layer="{{ dataset.wms_layer }}"{% endif %}
                                         {% if dataset.spatial_extent %}data-spatial-extent="{{ dataset.spatial_extent is iterable ? dataset.spatial_extent|json_encode : dataset.spatial_extent|escape('html_attr') }}"{% endif %}
                                         {% if dataset.metadata_xml %}data-metadata-xml="{{ dataset.metadata_xml|escape('html_attr') }}"{% endif %}>
                                        <div class="p-2 border-l-2 border-cadetblue">
                                            <h3 class="text-sm font-medium text-gray-800">{{ dataset.title }}</h3>
                                            {% if dataset.description %}
                                            <p class="text-xs text-gray-600 mt-1 line-clamp-2">{{ dataset.description }}</p>
                                            {% endif %}
                                            {% if dataset.topics %}
                                            <div class="mt-2 flex flex-wrap gap-1">
                                                {% for topic in dataset.topics %}
                                                <span class="text-xs px-2 py-1 bg-gray-100 text-gray-600 rounded-full">{{ topic.name }}</span>
                                                {% endfor %}
                                            </div>
                                            {% endif %}
                                        </div>
                                    </div>
                                    {% endif %}
                                {% endfor %}
                            </div>
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>

    <!-- Map Container -->
    <div class="flex-1 relative">
        <button id="export-pdf" class="export-button">
            <i class="fas fa-file-pdf"></i> Export to PDF
        </button>
        <div id="map" class="w-full h-full" style="position: relative;">
            <!-- Popup for feature information -->
            <div id="popup" class="ol-popup">
                <a href="#" id="popup-closer" class="ol-popup-closer"></a>
                <div id="popup-content" style="background-color:#fff!important; padding:12px!important"></div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
{{ parent() }}
<script src="https://cdn.jsdelivr.net/npm/ol@v7.4.0/dist/ol.js"></script>
<script src="https://cdn.jsdelivr.net/npm/ol-layerswitcher@4.1.1/dist/ol-layerswitcher.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Search functionality with reset
    const searchInput = document.getElementById('dataset-search');
    const searchReset = document.getElementById('search-reset');
    let searchTimeout;

    searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
            const searchTerm = this.value.trim();
            if (searchTerm.length >= 3) {
                window.location.href = `/viewer?search=${encodeURIComponent(searchTerm)}`;
            }
        }, 1000);
    });

    if (searchReset) {
        searchReset.addEventListener('click', function() {
            window.location.href = '/viewer';
        });
    }

    // Handle "More Datasets" button and pagination
    const moreDatasetsBtn = document.querySelector('.more-datasets-btn');
    const moreDatasetsContainer = document.querySelector('.more-datasets-container');
    const prevPageBtn = document.querySelector('.prev-page');
    const nextPageBtn = document.querySelector('.next-page');
    const currentPageSpan = document.querySelector('.current-page');
    let currentPage = 1;
    
    if (moreDatasetsBtn && moreDatasetsContainer) {
        moreDatasetsBtn.addEventListener('click', function() {
            const isHidden = moreDatasetsContainer.style.display === 'none';
            moreDatasetsContainer.style.display = isHidden ? 'block' : 'none';
            this.textContent = isHidden ? 
                'Show Less Datasets' : 
                `Show ${moreDatasetsContainer.querySelectorAll('.dataset-item').length} More Datasets`;
            
            if (isHidden) {
                // Reset to first page when showing more datasets
                currentPage = 1;
                updatePagination();
            }
        });
    }

    // Pagination functions
    function updatePagination() {
        const pages = moreDatasetsContainer.querySelectorAll('.datasets-page');
        pages.forEach((page, index) => {
            page.style.display = (index + 1) === currentPage ? 'block' : 'none';
        });

        if (currentPageSpan) {
            currentPageSpan.textContent = currentPage;
        }

        if (prevPageBtn) {
            prevPageBtn.disabled = currentPage === 1;
        }

        if (nextPageBtn) {
            const totalPages = pages.length;
            nextPageBtn.disabled = currentPage === totalPages;
        }
    }

    if (prevPageBtn) {
        prevPageBtn.addEventListener('click', function() {
            if (currentPage > 1) {
                currentPage--;
                updatePagination();
            }
        });
    }

    if (nextPageBtn) {
        nextPageBtn.addEventListener('click', function() {
            const totalPages = moreDatasetsContainer.querySelectorAll('.datasets-page').length;
            if (currentPage < totalPages) {
                currentPage++;
                updatePagination();
            }
        });
    }

    // Initialize accordion functionality
    function initializeAccordion() {
        document.querySelectorAll('.accordion-header').forEach(header => {
            header.addEventListener('click', function(e) {
                e.stopPropagation();
                
                const targetId = this.getAttribute('data-target');
                const content = document.getElementById(targetId);
                const icon = this.querySelector('.accordion-icon');
                
                // Toggle the current accordion
                const isCollapsed = this.classList.contains('collapsed');
                
                if (isCollapsed) {
                    // Expand
                    this.classList.remove('collapsed');
                    content.classList.remove('collapsed');
                    content.style.display = 'block';
                    if (icon) icon.textContent = '-';
                } else {
                    // Collapse
                    this.classList.add('collapsed');
                    content.classList.add('collapsed');
                    content.style.display = 'none';
                    if (icon) icon.textContent = '+';
                }
            });
        });
    }

    // Initialize accordions on page load
    initializeAccordion();

    // Set initial states
    document.querySelectorAll('.accordion-content').forEach(content => {
        if (content.classList.contains('expanded')) {
            content.style.display = 'block';
            const header = document.querySelector(`[data-target="${content.id}"]`);
            if (header) {
                header.classList.remove('collapsed');
                const icon = header.querySelector('.accordion-icon');
                if (icon) icon.textContent = '-';
            }
        } else {
            content.style.display = 'none';
        }
    });

    // Initialize OpenLayers map
    const map = new ol.Map({
        target: 'map',
        view: new ol.View({
            center: ol.proj.fromLonLat([0, 0]),
            zoom: 2
        })
    });

    // Create a layer group for base layers
    const baseGroup = new ol.layer.Group({
        title: 'Base Maps',
        layers: [
            new ol.layer.Tile({
                source: new ol.source.OSM({ crossOrigin: 'anonymous' }),
                title: 'OpenStreetMap',
                type: 'base',
                visible: true
            }),
            new ol.layer.Tile({
                source: new ol.source.XYZ({
                    url: 'https://{a-d}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png',
                    attributions: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors © <a href="https://carto.com/attributions">CARTO</a>',
                    crossOrigin: 'anonymous'
                }),
                title: 'Carto Light',
                type: 'base',
                visible: false
            }),
            new ol.layer.Tile({
                source: new ol.source.XYZ({
                    url: 'https://{a-d}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png',
                    attributions: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors © <a href="https://carto.com/attributions">CARTO</a>',
                    crossOrigin: 'anonymous'
                }),
                title: 'Carto Dark',
                type: 'base',
                visible: false
            }),
            new ol.layer.Tile({
                source: new ol.source.XYZ({
                    url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
                    attributions: '© <a href="https://www.esri.com/">Esri</a>',
                    crossOrigin: 'anonymous'
                }),
                title: 'ESRI Satellite',
                type: 'base',
                visible: false
            })
        ]
    });

    // Create a layer group for overlay layers
    const overlayGroup = new ol.layer.Group({
        title: 'Overlays',
        layers: []
    });

    // Add the layer groups to the map
    map.addLayer(baseGroup);
    map.addLayer(overlayGroup);

    // Initialize the layer switcher (no target option!)
    const layerSwitcher = new ol.control.LayerSwitcher({
        tipLabel: 'Layers',
        groupSelectStyle: 'group',
        activationMode: 'click',
        startActive: false
    });
    map.addControl(layerSwitcher);

    // Popup elements
    const container = document.getElementById('popup');
    const content = document.getElementById('popup-content');
    const closer = document.getElementById('popup-closer');
    const overlay = new ol.Overlay({
        element: container,
        autoPan: {
            animation: {
                duration: 250
            }
        },
        positioning: 'bottom-center',
        offset: [0, -10]
    });
    map.addOverlay(overlay);

    // Close popup when clicking the closer
    closer.onclick = function() {
        overlay.setPosition(undefined);
        closer.blur();
        return false;
    };

    // Close popup when clicking elsewhere on the map
    map.on('click', function(evt) {
        const pixel = map.getEventPixel(evt.originalEvent);
        const hit = map.hasFeatureAtPixel(pixel);
        if (!hit) {
            overlay.setPosition(undefined);
        }
    });

    // Set up drag and drop functionality
    const datasetItems = document.querySelectorAll('.dataset-item');
    const mapElement = document.getElementById('map');

    datasetItems.forEach(item => {
        item.addEventListener('dragstart', function(e) {
            e.dataTransfer.setData('text/plain', this.getAttribute('data-dataset-id'));
            this.classList.add('opacity-50');
        });

        item.addEventListener('dragend', function() {
            this.classList.remove('opacity-50');
        });
    });

    mapElement.addEventListener('dragover', function(e) {
        e.preventDefault();
        this.classList.add('border-2', 'border-blue-500');
    });

    mapElement.addEventListener('dragleave', function() {
        this.classList.remove('border-2', 'border-blue-500');
    });

    mapElement.addEventListener('drop', async function(e) {
        e.preventDefault();
        this.classList.remove('border-2', 'border-blue-500');

        const datasetId = e.dataTransfer.getData('text/plain');
        if (!datasetId) return;

        // Find the dragged dataset DOM element
        const datasetElem = document.querySelector(`.dataset-item[data-dataset-id='${datasetId}']`);
        const wmsUrl = datasetElem ? datasetElem.getAttribute('data-wms-url') : null;
        const wmsLayer = datasetElem ? datasetElem.getAttribute('data-wms-layer') : null;
        const spatialExtent = datasetElem ? datasetElem.getAttribute('data-spatial-extent') : null;

        console.log('Raw spatialExtent:', spatialExtent);

        if (wmsUrl && wmsLayer) {
            // Format WMS URL to ensure it ends with /wms
            let formattedWmsUrl = wmsUrl;
            if (!formattedWmsUrl.endsWith('/wms')) {
                formattedWmsUrl = formattedWmsUrl.endsWith('/') ? 
                    formattedWmsUrl + 'wms' : 
                    formattedWmsUrl + '/wms';
            }

            const layer = new ol.layer.Tile({
                source: new ol.source.TileWMS({
                    url: formattedWmsUrl,
                    params: {
                        'LAYERS': wmsLayer,
                        'TILED': true
                    },
                    serverType: 'geoserver',
                    crossOrigin: 'anonymous'
                }),
                title: datasetElem.getAttribute('data-title') || wmsLayer,
                type: 'overlay'
            });

            // Add the layer to the overlay group instead of directly to the map
            overlayGroup.getLayers().push(layer);

            // Refresh the layer switcher panel so the new layer appears
            layerSwitcher.renderPanel();

            // Zoom to layer extent if available
            if (spatialExtent) {
                try {
                    let extent = null;
                    if (typeof spatialExtent === 'string' && spatialExtent.trim().startsWith('{')) {
                        extent = JSON.parse(spatialExtent);
                    }
                    console.log('Parsed extent:', extent);

                    if (extent && extent.coordinates && extent.coordinates[0]) {
                        const coords = extent.coordinates[0];
                        console.log('Extent coordinates:', coords);

                        const minX = Math.min(...coords.map(c => c[0]));
                        const minY = Math.min(...coords.map(c => c[1]));
                        const maxX = Math.max(...coords.map(c => c[0]));
                        const maxY = Math.max(...coords.map(c => c[1]));

                        console.log('Calculated extent:', [minX, minY, maxX, maxY]);

                        const transformedExtent = ol.proj.transformExtent(
                            [minX, minY, maxX, maxY],
                            'EPSG:4326',
                            'EPSG:3857'
                        );

                        console.log('Transformed extent:', transformedExtent);

                        map.getView().fit(transformedExtent, {
                            padding: [50, 50, 50, 50],
                            maxZoom: 19,
                            duration: 1000
                        });
                    }
                } catch (error) {
                    console.error('Error handling spatial extent:', error);
                }
            }
        }
    });

    // Modify the click handler to process all visible WMS layers and show all features in the popup
    map.on('click', async function(evt) {
        console.log('Map clicked at:', evt.coordinate);
        const viewResolution = map.getView().getResolution();
        // Only get visible WMS layers from the overlay group
        const layers = overlayGroup.getLayers().getArray()
            .filter(layer => layer instanceof ol.layer.Tile && layer.getSource() instanceof ol.source.TileWMS && layer.getVisible());
        console.log('Visible WMS layers found:', layers.length);
        if (layers.length === 0) {
            overlay.setPosition(undefined);
            return;
        }
        // Fetch all GetFeatureInfo results in parallel
        const featureInfoPromises = layers.map(layer => {
            const source = layer.getSource();
            const params = source.getParams();
            const url = source.getFeatureInfoUrl(
                evt.coordinate,
                viewResolution,
                'EPSG:3857',
                {
                    'INFO_FORMAT': 'application/json',
                    'FEATURE_COUNT': 10,
                    'LAYERS': params.LAYERS
                }
            );
            return fetch(url)
                .then(response => response.json())
                .then(data => ({
                    layerTitle: layer.get('title') || params.LAYERS,
                    features: data.features || []
                }))
                .catch(() => ({
                    layerTitle: layer.get('title') || params.LAYERS,
                    features: []
                }));
        });
        const allResults = await Promise.all(featureInfoPromises);
        // Aggregate all features
        const hasAnyFeatures = allResults.some(result => result.features.length > 0);
        if (!hasAnyFeatures) {
            overlay.setPosition(undefined);
            return;
        }
        // Build popup HTML
        let html = '';
        allResults.forEach(result => {
            if (result.features.length > 0) {
                html += `<div class="feature-layer-group"><strong>${result.layerTitle}</strong>`;
                result.features.forEach(feature => {
                    html += '<div class="feature-properties">';
                    for (const [key, value] of Object.entries(feature.properties)) {
                        html += `<div class="feature-property"><span class="feature-property-label">${key}:</span> <span class="feature-property-value">${value}</span></div>`;
                    }
                    html += '</div>';
                });
                html += '</div>';
            }
        });
        content.innerHTML = html;
        overlay.setPosition(evt.coordinate);
    });

    // Add PDF export functionality
    document.getElementById('export-pdf').addEventListener('click', async function() {
        const button = this;
        button.disabled = true;
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Exporting...';

        try {
            const view = map.getView();
            const center = view.getCenter();
            const zoom = view.getZoom();
            const originalSize = map.getSize();
            const exportWidth = 1200; // px
            const exportHeight = 800; // px
            const exportSize = [exportWidth, exportHeight];

            // Helper function to get all visible, non-group layers
            function getVisibleLeafLayers(layerGroup) {
                let layers = [];
                layerGroup.getLayers().forEach(layer => {
                    if (layer instanceof ol.layer.Group) {
                        layers = layers.concat(getVisibleLeafLayers(layer));
                    } else if (layer.getVisible()) {
                        layers.push(layer);
                    }
                });
                return layers;
            }

            // Get visible layers
            const visibleLayers = getVisibleLeafLayers(map)
                .map(layer => layer.get('title') || 'Unnamed Layer');

            // Store original view
            const originalResolution = view.getResolution();
            const originalCenter = view.getCenter();

            // Resize map
            const mapElement = document.getElementById('map');
            const originalWidth = mapElement.style.width;
            const originalHeight = mapElement.style.height;

            mapElement.style.width = exportWidth + 'px';
            mapElement.style.height = exportHeight + 'px';
            map.updateSize();

            // Wait for all tiles to finish loading
            await new Promise((resolve, reject) => {
                let loading = 0;
                let loaded = 0;
                let error = false;
                function check() {
                    if (error) {
                        reject(new Error('Tile loading error'));
                    } else if (loading > 0 && loading === loaded) {
                        setTimeout(resolve, 100); // slight delay to ensure render
                    }
                }
                map.getLayers().forEach(layer => {
                    const source = layer.getSource && layer.getSource();
                    if (source && source.on) {
                        source.on('tileloadstart', function() { loading++; });
                        source.on('tileloadend', function() { loaded++; check(); });
                        source.on('tileloaderror', function() { error = true; check(); });
                    }
                });
                // Fallback: resolve after 5 seconds
                setTimeout(resolve, 5000);
            });

            // Wait for render
            await new Promise((resolve) => {
                map.once('rendercomplete', resolve);
                map.renderSync();
            });

            // Get the map canvas
            const mapCanvas = map.getTargetElement().querySelector('canvas');
            if (!mapCanvas) {
                throw new Error('Could not get map canvas');
            }

            // Create PDF
            const { jsPDF } = window.jspdf;
            const pdf = new jsPDF({
                orientation: 'landscape',
                unit: 'mm',
                format: 'a4'
            });

            // Add map image to first page
            const imgData = mapCanvas.toDataURL('image/png');
            const pdfWidth = pdf.internal.pageSize.getWidth();
            const pdfHeight = pdf.internal.pageSize.getHeight();
            const imgWidth = mapCanvas.width;
            const imgHeight = mapCanvas.height;
            const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);
            const imgX = (pdfWidth - imgWidth * ratio) / 2;
            const imgY = 20;

            pdf.addImage(imgData, 'PNG', imgX, imgY, imgWidth * ratio, imgHeight * ratio);

            // Add a new page for metadata
            pdf.addPage();
            pdf.setFontSize(16);
            pdf.text('Map Export Information', 20, 30);
            pdf.setFontSize(12);
            pdf.text(`Center: ${ol.proj.transform(center, 'EPSG:3857', 'EPSG:4326').map(coord => coord.toFixed(4)).join(', ')}`, 20, 50);
            pdf.text(`Zoom Level: ${zoom.toFixed(2)}`, 20, 60);
            pdf.text('Visible Layers:', 20, 70);
            visibleLayers.forEach((layer, index) => {
                pdf.text(`- ${layer}`, 25, 80 + (index * 8));
            });
            // Add timestamp
            const now = new Date();
            pdf.text(`Exported on: ${now.toLocaleString()}`, 20, 120);

            // Save PDF
            pdf.save('map-export.pdf');

            // Restore map size and view
            map.setSize(originalSize);
            view.setCenter(originalCenter);
            view.setResolution(originalResolution);
            mapElement.style.width = originalWidth;
            mapElement.style.height = originalHeight;
            map.updateSize();

            button.innerHTML = '<i class="fas fa-file-pdf"></i> Export to PDF';
        } catch (error) {
            console.error('Error exporting PDF:', error);
            button.innerHTML = '<i class="fas fa-exclamation-circle"></i> Export Failed';
            setTimeout(() => {
                button.innerHTML = '<i class="fas fa-file-pdf"></i> Export to PDF';
            }, 2000);
        } finally {
            button.disabled = false;
        }
    });
});
</script>
{% endblock %} 